version: '2.0'

backups.postgres_backup:
  description: "Workflow that backs up the StackStorm Postgres database"
  type: direct
  input:
    - path
    - mistral_config
    - date
    - retention_days
    - backup_timeout
    
  output:
    postgres_dump_archive: "{{ _.postgres_dump_archive }}"
    
  tasks:

    main:
      action: std.noop
      on-success:
        - read_connection: "{{ _.date }}"
        - date: "{{ not _.date }}"
    
    date:
      action: core.local
      input:
        cmd: "date +%Y%m%d_%H%M%S"
      publish:
        date: "{{ task('date').result.stdout }}"
      on-success:
        - read_connection

    read_connection:
      action: core.local
      input:
        cmd: "grep -E '^connection' {{ _.mistral_config }}"
      publish:
        postgres_connection: "{{ task('read_connection').result.stdout.split(' ')[2] }}"
        postgres_dump_file: "{{ _.path }}/postgres_dump_{{ _.date }}.sql"
        postgres_dump_archive: "{{ _.path }}/postgres_dump_{{ _.date }}.sql.gz"
      on-success:
        - mkdir_path

    mkdir_path:
      action: core.local_sudo
      input:
        cmd: "mkdir -p '{{ _.path }}'"
      on-success:
        - postgres_backup
        
    postgres_backup:
      action: core.local_sudo
      input:
        cmd: "pg_dump -f '{{ _.postgres_dump_file }}' '{{ _.postgres_connection }}'"
        timeout: "{{ _.backup_timeout }}"
      on-success:
        - postgres_compress

    postgres_compress:
      action: core.local_sudo
      input:
        cmd: "gzip '{{ _.postgres_dump_file }}'"
        timeout: "{{ _.backup_timeout }}"
      on-success:
        - postgres_delete_old_files

    postgres_delete_old_files:
      action: core.local_sudo
      input:
        cwd: "{{ _.path }}"
        cmd: "find . -name 'postgres_dump_*' -mtime {{ _.retention_days }} | xargs --no-run-if-empty rm"
    
